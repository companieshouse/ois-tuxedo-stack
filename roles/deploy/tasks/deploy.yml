---

- name: Set additional variables for template population
  set_fact:
    orders_min_boot_count: "{{ tuxedo_service_config[tuxedo_user].orders_min_boot_count | default(8) }}"
    private_host_address: "{{ inventory_hostname }}"
    private_host_local_domain_port: "{{ tuxedo_service_config[tuxedo_user].local_domain_port }}"
    service_name: "{{ tuxedo_user }}"
    tuxedo_env_file_path: "/home/{{ tuxedo_user }}/{{ deployment_dir }}/config/envfile"
    tuxedo_orders_env_file_path: "/home/{{ tuxedo_user }}/{{ deployment_dir }}/config/ordersenvfile"
    tuxedo_domain_id: "{{ tuxedo_user | upper }}_{{ 'OIS_' if environment_name == 'live' }}{{ tuxedo_domain_id_suffix }}"
    tuxedo_group_id: "{{ getent_passwd[tuxedo_user][getent_gid_index] }}"
    tuxedo_ipc_key: "{{ tuxedo_service_config[tuxedo_user].ipc_key }}"
    tuxedo_klist_file_path: "/home/{{ tuxedo_user }}/{{ deployment_dir }}/config/klist"
    tuxedo_finance_file_path: "/home/{{ tuxedo_user }}/{{ deployment_dir }}/config/finance"
    tuxedo_local_domain_id: "{{ tuxedo_user | upper }}_{{ 'OIS_' if environment_name == 'live' }}{{ tuxedo_local_domain_suffix }}"
    tuxedo_logical_machine_id: "{{ tuxedo_user | upper }}_{{ 'OIS_' if environment_name == 'live' }}{{ tuxedo_logical_machine_id_suffix }}"
    tuxedo_machine_name: "{{ ansible_facts.hostname }}"
    tuxedo_user_id: "{{ getent_passwd[tuxedo_user][getent_uid_index] }}"
    tuxedo_queue_path: "/home/{{ tuxedo_user }}/queues/{{ tuxedo_queue_space_device }}"
    tuxedo_log_size: "{{ tuxedo_service_config[tuxedo_user].tuxedo_log_size }}"
  no_log: True

- name: Retrieve alerts config from Hashicorp Vault
  set_fact:
    alerts_config: "{{ lookup('community.hashi_vault.hashi_vault', alerts.vault_path) }}"
  when: alerts.enabled

- name: Retrieve stats config from Hashicorp Vault
  set_fact:
    stats_config: "{{ lookup('community.hashi_vault.hashi_vault', stats.vault_path) }}"
  when: stats.enabled

- name: "{{ tuxedo_user }} : Remove maintenance jobs during deploy"
  cron:
    name: "{{ item.name }}"
    user: "{{ tuxedo_user }}"
    state: absent
  loop: "{{ maintenance_jobs[tuxedo_user] | default([]) }}"

- name: "{{ tuxedo_user }} : Create temporary directory for new {{ tuxedo_user }} deployment"
  become_user: "{{ tuxedo_user }}"
  tempfile:
    state: directory
  register: new_deployment_files

- name: "{{ tuxedo_user }} : Copy application artifact files to temporary {{ tuxedo_user }} deployment directory"
  become_user: "{{ tuxedo_user }}"
  command: "cp -r {{ application_artifact_files.path }}/. {{ new_deployment_files.path }}"

- name: "{{ tuxedo_user }} : Create service logs directory"
  file:
    path: "{{ tuxedo_logs_path }}/{{ tuxedo_user }}"
    owner: "{{ tuxedo_user }}"
    group: "{{ tuxedo_user }}"
    mode: 0755
    state: directory

- name: "{{ tuxedo_user }} : Create config directory"
  file:
    path: "{{ new_deployment_files.path }}/config"
    owner: "{{ tuxedo_user }}"
    group: "{{ tuxedo_user }}"
    mode: 0755
    state: directory

- name: "{{ tuxedo_user }} : Populate template config files"
  template:
    src: "{{ item }}"
    dest: "{{ new_deployment_files.path }}/config/{{ item | basename | replace('.j2', '') }}"
    owner: "{{ tuxedo_user }}"
    group: "{{ tuxedo_user }}"
    mode: 0644
  with_fileglob:
    - "{{ application_configs_path }}/{{ tuxedo_user }}/*.j2"
  no_log: True

- name: "{{ tuxedo_user }} : Create scripts directory"
  file:
    path: "{{ new_deployment_files.path }}/scripts"
    owner: "{{ tuxedo_user }}"
    group: "{{ tuxedo_user }}"
    mode: 0755
    state: directory

- name: "{{ tuxedo_user }} : Populate script template files"
  template:
    src: "{{ item }}"
    dest: "{{ new_deployment_files.path }}/scripts/{{ item | basename | replace('.j2', '') }}"
    owner: "{{ tuxedo_user }}"
    group: "{{ tuxedo_user }}"
    mode: 0755
  with_fileglob:
    - "{{ scripts_artifact_path }}/*.j2"

- name: "{{ tuxedo_user }} : Set permissions for new deployment files"
  file:
    path: "{{ new_deployment_files.path }}"
    owner: "{{ tuxedo_user }}"
    group: "{{ tuxedo_user }}"
    recurse: yes

- name: "{{ tuxedo_user }} : Check state of {{ tuxedo_user }} current deployment directory"
  stat:
    path: "/home/{{ tuxedo_user }}/{{ deployment_dir }}"
  register: current_deployment_files

- name: "{{ tuxedo_user }} : Stop mncq daemon processes"
  become_user: "{{ tuxedo_user }}"
  shell: "source {{ tuxedo_env_file_path }} && /home/{{ tuxedo_user }}/{{ deployment_dir }}/scripts/mncq_stop"
  args:
    executable: /bin/bash
  ignore_errors: yes
  when: tuxedo_user != "ceu" and tuxedo_user != "wck"

- name: "{{ tuxedo_user }} : Stop packq daemon processes"
  become_user: "{{ tuxedo_user }}"
  shell: "source {{ tuxedo_env_file_path }} && /home/{{ tuxedo_user }}/{{ deployment_dir }}/scripts/packq_stop"
  args:
    executable: /bin/bash
  ignore_errors: yes
  when: tuxedo_user != "ceu" and tuxedo_user != "xml"

- name: "{{ tuxedo_user }} : Stop Tuxedo services"
  become_user: "{{ tuxedo_user }}"
  shell: "source {{ tuxedo_env_file_path }} && timeout -s 9 20 tmshutdown -y"
  args:
    executable: /bin/bash
  ignore_errors: yes
  when: current_deployment_files.stat.exists

- name: "{{ tuxedo_user }} : Clear IPC facilities"
  become_user: "{{ tuxedo_user }}"
  shell: "source {{ tuxedo_env_file_path }} && zapipc"
  args:
    executable: /bin/bash
  when: current_deployment_files.stat.exists

- name: "{{ tuxedo_user }} : Remove {{ tuxedo_user }} rollback directory if present"
  file:
    path: "/home/{{ tuxedo_user }}/{{ rollback_dir }}"
    state: absent

- name: "{{ tuxedo_user }} : Backup {{ tuxedo_user }} current deployment directory if one exists"
  become_user: "{{ tuxedo_user }}"
  command: "mv /home/{{ tuxedo_user }}/{{ deployment_dir }} /home/{{ tuxedo_user }}/{{ rollback_dir }}"
  when: current_deployment_files.stat.exists

- name: "{{ tuxedo_user }} : Install new deployment files"
  become_user: "{{ tuxedo_user }}"
  command: "mv {{ new_deployment_files.path }} /home/{{ tuxedo_user }}/{{ deployment_dir }}"

- name: "{{ tuxedo_user }} : Lint Tuxedo ubbconfig file after variable population"
  become_user: "{{ tuxedo_user }}"
  shell: "source {{ tuxedo_env_file_path }} && tmloadcf -n ubbconfig"
  args:
    chdir: "/home/{{ tuxedo_user }}/{{ deployment_dir }}/config"
    executable: /bin/bash
  register: ubbconfig_lint

- name: "{{ tuxedo_user }} : Assert Tuxedo ubbconfig lint success"
  assert:
    that:
      - ubbconfig_lint.rc == 0
    fail_msg: "Tuxedo ubbconfig file failed lint check"
    success_msg: "Tuxedo ubbconfig file passed lint check"

- name: "{{ tuxedo_user }} : Generate Tuxedo binary tuxconfig file"
  become_user: "{{ tuxedo_user }}"
  shell: "source {{ tuxedo_env_file_path }} && tmloadcf -y ubbconfig"
  args:
    chdir: "/home/{{ tuxedo_user }}/{{ deployment_dir }}/config"
    executable: /bin/bash

- name: "{{ tuxedo_user }} : Lint Tuxedo dmconfig file after variable population"
  become_user: "{{ tuxedo_user }}"
  shell: "source {{ tuxedo_env_file_path }} && dmloadcf -n dmconfig"
  args:
    chdir: "/home/{{ tuxedo_user }}/{{ deployment_dir }}/config"
    executable: /bin/bash
  register: dmconfig_lint

- name: "{{ tuxedo_user }} : Assert Tuxedo dmconfig lint success"
  assert:
    that:
      - dmconfig_lint.rc == 0
    fail_msg: "Tuxedo dmconfig file failed lint check"
    success_msg: "Tuxedo dmconfig file passed lint check"

- name: "{{ tuxedo_user }} : Generate Tuxedo binary bdmconfig file"
  become_user: "{{ tuxedo_user }}"
  shell: "source {{ tuxedo_env_file_path }} && dmloadcf -y dmconfig"
  args:
    chdir: "/home/{{ tuxedo_user }}/{{ deployment_dir }}/config"
    executable: /bin/bash

- name: "{{ tuxedo_user }} : Create CloudWatch agent configuration file for Tuxedo service group"
  template:
    src: templates/cloudwatch-config-service.json.j2
    dest: "{{ cloudwatch_agent.config_dir }}/cloudwatch-config-{{ tuxedo_user }}.json"
    trim_blocks: False

- name: "{{ tuxedo_user }} : Check state of {{ tuxedo_user }} queue"
  stat:
    path: "/home/{{ tuxedo_user }}/queues/{{ tuxedo_queue_space_device }}"
  register: queue

- name: "{{ tuxedo_user }} : Create queues directory"
  file:
    path: "/home/{{ tuxedo_user }}/queues"
    state: directory
    mode: 0755
    owner: "{{ tuxedo_user }}"
    group: "{{ tuxedo_user }}"

- name: "{{ tuxedo_user }} : Deploy queue creation script"
  template:
    src: "create_{{ tuxedo_user }}_queue.j2"
    dest: "/home/{{ tuxedo_user }}/create_{{ tuxedo_user }}_queue"
    owner: "{{ tuxedo_user }}"
    group: "{{ tuxedo_user }}"
    mode: 0777
  when: not queue.stat.exists

- name: "{{ tuxedo_user }} : Create universal device entry, queue space, and queues"
  become_user: "{{ tuxedo_user }}"
  shell: "source {{ tuxedo_env_file_path }} && ./create_{{ tuxedo_user }}_queue"
  args:
    chdir: "/home/{{ tuxedo_user }}"
    executable: /bin/bash
  when: not queue.stat.exists

- name: "{{ tuxedo_user }} : Remove queue creation script"
  file:
    path: "/home/{{ tuxedo_user }}/create_{{ tuxedo_user }}_queue"
    state: absent
  when: not queue.stat.exists

- name: "{{ tuxedo_user }} : Start Tuxedo services"
  become_user: "{{ tuxedo_user }}"
  shell: "source /home/{{ tuxedo_user }}/{{ deployment_dir }}/config/envfile && tmboot -y"
  args:
    executable: /bin/bash

- name: "{{ tuxedo_user }} : Start mncq daemon processes"
  become_user: "{{ tuxedo_user }}"
  shell: "source {{ tuxedo_env_file_path }} && /home/{{ tuxedo_user }}/{{ deployment_dir }}/scripts/mncq_start"
  args:
    executable: /bin/bash
  ignore_errors: yes
  when: tuxedo_user != "ceu" and tuxedo_user != "wck"

- name: "{{ tuxedo_user }} : Start packq daemon processes"
  become_user: "{{ tuxedo_user }}"
  shell: "source {{ tuxedo_env_file_path }} && /home/{{ tuxedo_user }}/{{ deployment_dir }}/scripts/packq_start"
  args:
    executable: /bin/bash
  ignore_errors: yes
  when: tuxedo_user != "ceu" and tuxedo_user != "xml"

- name: "{{ tuxedo_user }} : Create maintenance jobs"
  cron:
    name: "{{ item.name }}"
    day: "{{ item.day_of_month }}"
    weekday: "{{ item.day_of_week }}"
    minute: "{{ item.minute }}"
    hour: "{{ item.hour }}"
    month: "{{ item.month }}"
    user: "{{ tuxedo_user }}"
    job: "source /home/{{ tuxedo_user }}/{{ deployment_dir }}/config/envfile && /home/{{ tuxedo_user }}/{{ deployment_dir }}/scripts/{{ item.script }}"
  loop: "{{ maintenance_jobs[tuxedo_user] | default([]) }}"
