---

- name: "Set additional variables for template population : {{ tuxedo_user }}"
  ansible.builtin.set_fact:
    orders_min_boot_count: "{{ tuxedo_service_config[tuxedo_user].orders_min_boot_count | default(8) }}"
    private_host_address: "{{ inventory_hostname }}"
    private_host_local_domain_port: "{{ tuxedo_service_config[tuxedo_user].local_domain_port }}"
    service_name: "{{ tuxedo_user }}"
    tuxedo_env_file_path: "/home/{{ tuxedo_user }}/{{ deployment_dir }}/config/envfile"
    tuxedo_orders_env_file_path: "/home/{{ tuxedo_user }}/{{ deployment_dir }}/config/ordersenvfile"
    tuxedo_domain_id: "{{ tuxedo_user | upper }}_{{ 'OIS_' if environment_name == 'live' }}{{ tuxedo_domain_id_suffix }}"
    tuxedo_group_id: "{{ getent_passwd[tuxedo_user][getent_gid_index] }}"
    tuxedo_ipc_key: "{{ tuxedo_service_config[tuxedo_user].ipc_key }}"
    tuxedo_klist_file_path: "/home/{{ tuxedo_user }}/{{ deployment_dir }}/config/klist"
    tuxedo_finance_file_path: "/home/{{ tuxedo_user }}/{{ deployment_dir }}/config/finance"
    tuxedo_local_domain_id: "{{ tuxedo_user | upper }}_{{ 'OIS_' if environment_name == 'live' }}{{ tuxedo_local_domain_suffix }}"
    tuxedo_logical_machine_id: "{{ tuxedo_user | upper }}_{{ 'OIS_' if environment_name == 'live' }}{{ tuxedo_logical_machine_id_suffix }}"
    tuxedo_machine_name: "{{ ansible_facts.hostname }}"
    tuxedo_user_id: "{{ getent_passwd[tuxedo_user][getent_uid_index] }}"
    tuxedo_queue_path: "/home/{{ tuxedo_user }}/queues/{{ tuxedo_queue_space_device }}"
    tuxedo_log_size: "{{ tuxedo_service_config[tuxedo_user].tuxedo_log_size }}"
  no_log: true

- name: "Retrieve alerts config from Hashicorp Vault : {{ tuxedo_user }}"
  ansible.builtin.set_fact:
    alerts_config: "{{ lookup('community.hashi_vault.hashi_vault', alerts.vault_path) }}"
  when: alerts.enabled

- name: "Retrieve stats config from Hashicorp Vault : {{ tuxedo_user }}"
  ansible.builtin.set_fact:
    stats_config: "{{ lookup('community.hashi_vault.hashi_vault', stats.vault_path) }}"
  when: stats.enabled

- name: "Remove maintenance jobs during deploy : {{ tuxedo_user }}"
  ansible.builtin.file:
    path: "/var/spool/cron/{{ tuxedo_user }}"
    state: absent

- name: "Create temporary directory for new deployment : {{ tuxedo_user }}"
  become: true
  become_user: "{{ tuxedo_user }}"
  ansible.builtin.tempfile:
    state: directory
  register: new_deployment_files
  changed_when: true

- name: "Copy application artifact files to temporary deployment directory : {{ tuxedo_user }}"
  become: true
  become_user: "{{ tuxedo_user }}"
  ansible.builtin.command: "cp -r {{ application_artifact_files.path }}/. {{ new_deployment_files.path }}"
  changed_when: true

- name: "Create Tuxedo service logs directory : {{ tuxedo_user }}"
  ansible.builtin.file:
    path: "{{ tuxedo_logs_path }}/{{ tuxedo_user }}"
    owner: "{{ tuxedo_user }}"
    group: "{{ tuxedo_user }}"
    mode: '0755'
    state: directory

- name: "Create config directory : {{ tuxedo_user }}"
  ansible.builtin.file:
    path: "{{ new_deployment_files.path }}/config"
    owner: "{{ tuxedo_user }}"
    group: "{{ tuxedo_user }}"
    mode: '0755'
    state: directory

- name: "Populate Tuxedo template config files : {{ tuxedo_user }}"
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ new_deployment_files.path }}/config/{{ item | basename | replace('.j2', '') }}"
    owner: "{{ tuxedo_user }}"
    group: "{{ tuxedo_user }}"
    mode: '0644'
  with_fileglob:
    - "{{ application_configs_path }}/{{ tuxedo_user }}/*.j2"
  no_log: true

- name: "Create scripts directory : {{ tuxedo_user }}"
  ansible.builtin.file:
    path: "{{ new_deployment_files.path }}/scripts"
    owner: "{{ tuxedo_user }}"
    group: "{{ tuxedo_user }}"
    mode: '0755'
    state: directory

- name: "Populate script template files : {{ tuxedo_user }}"
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ new_deployment_files.path }}/scripts/{{ item | basename | replace('.j2', '') }}"
    owner: "{{ tuxedo_user }}"
    group: "{{ tuxedo_user }}"
    mode: '0755'
  with_fileglob:
    - "{{ scripts_artifact_path }}/*.j2"

- name: "Set permissions for new deployment files : {{ tuxedo_user }}"
  ansible.builtin.file:
    path: "{{ new_deployment_files.path }}"
    owner: "{{ tuxedo_user }}"
    group: "{{ tuxedo_user }}"
    recurse: true

- name: "Check state of current deployment directory : {{ tuxedo_user }}"
  ansible.builtin.stat:
    path: "/home/{{ tuxedo_user }}/{{ deployment_dir }}"
  register: current_deployment_files

- name: "Stop mncq daemon processes : {{ tuxedo_user }}" # noqa ignore-errors
  become: true
  become_user: "{{ tuxedo_user }}"
  register: stop_mncq_daemon
  ansible.builtin.shell: "source {{ tuxedo_env_file_path }} && /home/{{ tuxedo_user }}/{{ deployment_dir }}/scripts/mncq_stop"
  args:
    executable: /bin/bash
  ignore_errors: true
  when: tuxedo_user != "ceu"
  changed_when: "'mncq daemon stopped' in stop_mncq_daemon.stdout and stop_mncq_daemon.rc == 0"

- name: "Stop packq daemon processes : {{ tuxedo_user }}" # noqa ignore-errors
  become: true
  become_user: "{{ tuxedo_user }}"
  register: stop_packq_daemon
  ansible.builtin.shell: "source {{ tuxedo_env_file_path }} && /home/{{ tuxedo_user }}/{{ deployment_dir }}/scripts/packq_stop"
  args:
    executable: /bin/bash
  ignore_errors: true
  when: tuxedo_user != "ceu" and tuxedo_user != "xml"
  changed_when: "'packq daemon stopped' in stop_packq_daemon.stdout and stop_packq_daemon.rc == 0"

- name: "Stop Tuxedo services : {{ tuxedo_user }}" # noqa ignore-errors
  become: true
  become_user: "{{ tuxedo_user }}"
  ansible.builtin.shell: "source {{ tuxedo_env_file_path }} && timeout -s 9 20 tmshutdown -y"
  args:
    executable: /bin/bash
  ignore_errors: true
  when: current_deployment_files.stat.exists
  changed_when: true

- name: "Clear IPC facilities : {{ tuxedo_user }}"
  become: true
  become_user: "{{ tuxedo_user }}"
  ansible.builtin.shell: "source {{ tuxedo_env_file_path }} && zapipc"
  args:
    executable: /bin/bash
  when: current_deployment_files.stat.exists
  changed_when: true

- name: "Remove rollback directory if present : {{ tuxedo_user }}"
  ansible.builtin.file:
    path: "/home/{{ tuxedo_user }}/{{ rollback_dir }}"
    state: absent

- name: "Backup current deployment directory if one exists : {{ tuxedo_user }}"
  become: true
  become_user: "{{ tuxedo_user }}"
  ansible.builtin.command: "mv /home/{{ tuxedo_user }}/{{ deployment_dir }} /home/{{ tuxedo_user }}/{{ rollback_dir }}"
  when: current_deployment_files.stat.exists
  changed_when: true

- name: "Install new deployment files : {{ tuxedo_user }}"
  become: true
  become_user: "{{ tuxedo_user }}"
  ansible.builtin.command: "mv {{ new_deployment_files.path }} /home/{{ tuxedo_user }}/{{ deployment_dir }}"
  changed_when: true

- name: "Lint Tuxedo ubbconfig file after variable population : {{ tuxedo_user }}"
  become: true
  become_user: "{{ tuxedo_user }}"
  ansible.builtin.shell: "source {{ tuxedo_env_file_path }} && tmloadcf -n ubbconfig"
  args:
    chdir: "/home/{{ tuxedo_user }}/{{ deployment_dir }}/config"
    executable: /bin/bash
  register: ubbconfig_lint
  changed_when: false

- name: "Assert Tuxedo ubbconfig lint success : {{ tuxedo_user }}"
  ansible.builtin.assert:
    that:
      - ubbconfig_lint.rc == 0
    fail_msg: "Tuxedo ubbconfig file failed lint check"
    success_msg: "Tuxedo ubbconfig file passed lint check"

- name: "Generate Tuxedo binary tuxconfig file : {{ tuxedo_user }}"
  become: true
  become_user: "{{ tuxedo_user }}"
  ansible.builtin.shell: "source {{ tuxedo_env_file_path }} && tmloadcf -y ubbconfig"
  args:
    chdir: "/home/{{ tuxedo_user }}/{{ deployment_dir }}/config"
    executable: /bin/bash
  changed_when: true

- name: "Lint Tuxedo dmconfig file after variable population : {{ tuxedo_user }}"
  become: true
  become_user: "{{ tuxedo_user }}"
  ansible.builtin.shell: "source {{ tuxedo_env_file_path }} && dmloadcf -n dmconfig"
  args:
    chdir: "/home/{{ tuxedo_user }}/{{ deployment_dir }}/config"
    executable: /bin/bash
  register: dmconfig_lint
  changed_when: false

- name: "Assert Tuxedo dmconfig lint success : {{ tuxedo_user }}"
  ansible.builtin.assert:
    that:
      - dmconfig_lint.rc == 0
    fail_msg: "Tuxedo dmconfig file failed lint check"
    success_msg: "Tuxedo dmconfig file passed lint check"

- name: "Generate Tuxedo binary bdmconfig file : {{ tuxedo_user }}"
  become: true
  become_user: "{{ tuxedo_user }}"
  ansible.builtin.shell: "source {{ tuxedo_env_file_path }} && dmloadcf -y dmconfig"
  args:
    chdir: "/home/{{ tuxedo_user }}/{{ deployment_dir }}/config"
    executable: /bin/bash
  changed_when: true

- name: "Configure recipient address for user-specific cron job emails : {{ tuxedo_user }}"
  community.general.cronvar:
    name: MAILTO
    value: root@localhost
    user: "{{ tuxedo_user }}"

- name: "Create CloudWatch agent configuration file for Tuxedo service group : {{ tuxedo_user }}"
  ansible.builtin.template:
    src: templates/cloudwatch-config-service.json.j2
    dest: "{{ cloudwatch_agent.config_dir }}/cloudwatch-config-{{ tuxedo_user }}.json"
    owner: cwagent
    group: cwagent
    mode: '0644'
    trim_blocks: false

- name: "Check state of queue : {{ tuxedo_user }}"
  ansible.builtin.stat:
    path: "/home/{{ tuxedo_user }}/queues/{{ tuxedo_queue_space_device }}"
  register: queue

- name: "Create queues directory : {{ tuxedo_user }}"
  ansible.builtin.file:
    path: "/home/{{ tuxedo_user }}/queues"
    state: directory
    mode: '0755'
    owner: "{{ tuxedo_user }}"
    group: "{{ tuxedo_user }}"

- name: "Deploy queue creation script : {{ tuxedo_user }}"
  ansible.builtin.template:
    src: "create_{{ tuxedo_user }}_queue.j2"
    dest: "/home/{{ tuxedo_user }}/create_{{ tuxedo_user }}_queue"
    owner: "{{ tuxedo_user }}"
    group: "{{ tuxedo_user }}"
    mode: '0777'
  when: not queue.stat.exists

- name: "Create universal device entry, queue space, and queues : {{ tuxedo_user }}"
  become: true
  become_user: "{{ tuxedo_user }}"
  ansible.builtin.shell: "source {{ tuxedo_env_file_path }} && ./create_{{ tuxedo_user }}_queue"
  args:
    chdir: "/home/{{ tuxedo_user }}"
    executable: /bin/bash
  when: not queue.stat.exists
  changed_when: true

- name: "Remove queue creation script : {{ tuxedo_user }}"
  ansible.builtin.file:
    path: "/home/{{ tuxedo_user }}/create_{{ tuxedo_user }}_queue"
    state: absent
  when: not queue.stat.exists

- name: "Start Tuxedo services : {{ tuxedo_user }}"
  become: true
  become_user: "{{ tuxedo_user }}"
  ansible.builtin.shell: "source {{ tuxedo_env_file_path }} && tmboot -y"
  args:
    executable: /bin/bash
  changed_when: true

- name: "Start mncq daemon processes : {{ tuxedo_user }}" # noqa ignore-errors
  become: true
  become_user: "{{ tuxedo_user }}"
  register: start_mncq_daemon
  ansible.builtin.shell: "source {{ tuxedo_env_file_path }} && /home/{{ tuxedo_user }}/{{ deployment_dir }}/scripts/mncq_start"
  args:
    executable: /bin/bash
  ignore_errors: true
  when: tuxedo_user != "ceu"
  changed_when: "start_mncq_daemon.rc == 0"

- name: "Start packq daemon processes : {{ tuxedo_user }}"
  become: true
  become_user: "{{ tuxedo_user }}"
  register: start_packq_daemon
  ansible.builtin.shell: "source {{ tuxedo_env_file_path }} && /home/{{ tuxedo_user }}/{{ deployment_dir }}/scripts/packq_start"
  args:
    executable: /bin/bash
  ignore_errors: true
  when: tuxedo_user != "ceu" and tuxedo_user != "xml"
  changed_when: "start_packq_daemon.rc == 0"

- name: "Create maintenance jobs : {{ tuxedo_user }}"
  ansible.builtin.cron:
    name: "{{ item.name }}"
    day: "{{ item.day_of_month }}"
    weekday: "{{ item.day_of_week }}"
    minute: "{{ item.minute }}"
    hour: "{{ item.hour }}"
    month: "{{ item.month }}"
    user: "{{ tuxedo_user }}"
    job: "source {{ tuxedo_env_file_path }} && /home/{{ tuxedo_user }}/{{ deployment_dir }}/scripts/{{ item.script }}"
    disabled: "{{ item.disabled | default(false) }}"
  loop: "{{ maintenance_jobs[tuxedo_user] | default([]) }}"
